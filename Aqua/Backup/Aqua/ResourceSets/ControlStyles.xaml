<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	xmlns:igWindows="http://infragistics.com/Windows"
	xmlns:igThemes="http://infragistics.com/Themes"
	xmlns:igEditors="http://infragistics.com/Editors"
	xmlns:igDP="http://infragistics.com/DataPresenter"	
	xmlns:IG_TilePanel="clr-namespace:Infragistics.Windows.TilePanel;assembly=Infragistics.Windows.TilePanel"
	
	>
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="ControlBrushes.xaml"/>
	</ResourceDictionary.MergedDictionaries>
	
	<Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, BlackForegroundStyle}">
		<Setter Property="TextBlock.Foreground" Value="#FF000000" />
	</Style>

	<Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}">
		<Setter Property="TextBlock.Foreground" Value="#ffffffff" />
	</Style>

	<Style x:Key="HeaderLabelStyle" TargetType="{x:Type TextBlock}">
		<Setter Property="FontFamily" Value="Calibri"/>
		<Setter Property="FontSize" Value="18"/>
		<Setter Property="Foreground" Value="{DynamicResource HeaderForeground}"/>
		<Setter Property="FontWeight" Value="Light"/>
	</Style>
	<Style TargetType="{x:Type ScrollBar}">
		<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollBar}">
					<Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
						<Grid.RowDefinitions>
							<RowDefinition MaxHeight="18"/>
							<RowDefinition Height="0.00001*"/>
							<RowDefinition MaxHeight="18"/>
						</Grid.RowDefinitions>
						
						<Rectangle Fill="{DynamicResource ScrollBarBGFill}" Grid.RowSpan="3" RenderTransformOrigin="0.5,0.5" Grid.Row="0" Stroke="{DynamicResource ScrollBarBgStroke}"/>
						
						<RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineUpCommand">
							<Grid>
								<Path
		
		Height="6"
		Width="7"
		Stretch="Fill"
		Opacity="1"
		Data="M 728,269 C728,269 725,264 725,264 725,264 722,269 722,269 722,269 728,269 728,269 z"
		Fill="{DynamicResource ScrollBarThumbBorder}" />
							</Grid>
						</RepeatButton>
						
						<!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
						<Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
							<Track.Thumb>
								<Thumb Style="{DynamicResource SimpleThumbStyle}" Margin="2,0,2,0"/>
							</Track.Thumb>
							<Track.IncreaseRepeatButton>
								<RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand"/>
							</Track.IncreaseRepeatButton>
							<Track.DecreaseRepeatButton>
								<RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand"/>
							</Track.DecreaseRepeatButton>
						</Track>
						
						<RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineDownCommand">
							<Grid>
									<Path
		
		Height="6"
		Width="7"
		Stretch="Fill"
		Opacity="1"
		Data="M 728,398 C728,398 725,403 725,403 725,403 722,398 722,398 722,398 728,398 728,398 z"
		Fill="{DynamicResource ScrollBarThumbBorder}" />
							</Grid>
						</RepeatButton>
					</Grid>
					
					<!-- This uses a single template for ScrollBar and rotate it to be Horizontal
					It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
					<ControlTemplate.Triggers>
						<Trigger Property="Orientation" Value="Horizontal">

							<!-- Rotate the ScrollBar from Vertical to Horizontal -->
							<Setter Property="LayoutTransform" TargetName="GridRoot">
								<Setter.Value>
									<RotateTransform Angle="-90"/>
								</Setter.Value>
							</Setter>
							
							<!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
							<Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>
					
							<!-- Change the commands to do Horizontal commands -->
							<Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
							<Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
							<Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
							<Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Background" Value="{DynamicResource ScrollBarBGFill}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource ScrollBarBGFill}"/>
		<Setter Property="BorderThickness" Value="1,1,1,1"/>
	</Style>
	<!-- Resource dictionary entries should be defined here. -->
		<Style x:Key="ExpandToggle" TargetType="{x:Type ToggleButton}">
			
			<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
			<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Path
							Width="11"
							Height="9"
							Data="M 4,2.000 C4,2.000 10,2.000 10,2.000 10,2.000 10,5.000 10,5.000 10,5.000 8,5 8,5 8,5 8,3.000 8,3.000 8,3.000 4,3 4,3 4,3 4,2.000 4,2.000 zM 7,8 C7,8 1,8 1,8 1,8 1,5 1,5 1,5 7,5 7,5 7,5 7,8 7,8 zM 3,0.000 C3,0.000 3,3 3,3 3,3 0,3.000 0,3.000 0,3.000 0,9.000 0,9.000 0,9.000 8,9.000 8,9.000 8,9.000 8,6 8,6 8,6 11,6.000 11,6.000 11,6.000 11,0.000 11,0.000 11,0.000 3,0.000 3,0.000 z"
							Fill="#ffffff"
							Opacity="1"
							Stretch="Fill"/>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true"/>
							<Trigger Property="IsChecked" Value="true"/>
							<Trigger Property="IsPressed" Value="True"/>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="#ADADAD"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<DataTemplate x:Key="CustomContentTemplate"/>
		<Style x:Key="WorkspacePanelItemStyle" TargetType="{x:Type ListBoxItem}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ListBoxItem}">
						<Grid Margin="5,5,5,5" MinWidth="200">
							<Grid.RowDefinitions>
								<RowDefinition Height="50"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>
							<Rectangle
								Grid.Row="0"
								Grid.RowSpan="2"
								Fill="#FFFFFFFF"
								RadiusX="5"
								RadiusY="5"
								Stroke="{x:Null}"/>
							<Border
								x:Name="header"
								Grid.RowSpan="1"
								Background="{DynamicResource HeaderBg}"
								BorderBrush="{x:Null}"
								CornerRadius="5,5,0,0">
								<Grid>
					
									<StackPanel
								x:Name="HeaderLabel"
										Width="Auto"
										Height="30"
										HorizontalAlignment="Left"
										Margin="10,0,0,0"
										VerticalAlignment="Center"
										Orientation="Horizontal">
										<Path
											Width="29"
											Height="27"
											Data="M 4.337,16.608 C4.337,16.608 9.340,12.229 9.340,12.229 9.592,12.009 10.031,12.109 10.323,12.452 10.615,12.795 10.647,13.251 10.396,13.471 10.396,13.471 5.393,17.850 5.393,17.850 5.142,18.070 4.702,17.970 4.410,17.627 4.119,17.284 4.086,16.828 4.337,16.608 zM 1.655,16.630 C-0.921,18.922 -0.952,22.283 1.283,24.948 3.468,27.551 7.677,27.992 10.254,25.699 10.254,25.699 16.180,20.361 16.180,20.361 18.756,18.068 18.920,14.180 16.546,11.675 14.171,9.171 10.158,8.999 7.581,11.291 7.581,11.291 1.655,16.630 1.655,16.630 zM 16.369,5.989 C16.369,5.989 21.372,1.610 21.372,1.610 21.623,1.390 22.063,1.490 22.355,1.833 22.646,2.176 22.679,2.632 22.428,2.852 22.428,2.852 17.425,7.231 17.425,7.231 17.174,7.451 16.734,7.351 16.442,7.008 16.151,6.665 16.118,6.209 16.369,5.989 zM 19.359,17.041 C19.359,17.041 26.910,10.522 26.910,10.522 29.514,8.273 29.737,4.401 27.408,1.873 25.079,-0.654 21.081,-0.881 18.476,1.366 18.476,1.366 10.237,8.479 10.237,8.479 12.812,8.091 15.534,8.938 17.401,10.964 18.991,12.690 19.633,14.917 19.359,17.041 z"
											Fill="#FFFFFFFF"
											Opacity="1"
											Stretch="Fill"/>
										<TextBlock
											Margin="10,0,0,0"
											VerticalAlignment="Center"
											Text="{TemplateBinding Tag}"
											TextWrapping="Wrap" FontFamily="Calibri" FontSize="18" Foreground="{DynamicResource HeaderForeground}"/>
									</StackPanel>
									<ToggleButton x:Name="ExpandToggle" HorizontalAlignment="Right" VerticalAlignment="Top" Content="ToggleButton" Margin="0,5,5,0" Style="{DynamicResource ExpandToggle}"/>
								</Grid>
							</Border>
							<ContentPresenter Width="Auto" Grid.Row="1" HorizontalAlignment="Stretch" Margin="{TemplateBinding Padding}" VerticalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"/>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="MinHeight" Value="200"/>
		</Style>
		<ItemsPanelTemplate x:Key="ListboxPanel">
			<WrapPanel />
		</ItemsPanelTemplate>
		<Style x:Key="AddButton" TargetType="{x:Type Button}">
		<Setter Property="Background" Value="#FFFF0A0A"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid>
							<Rectangle Fill="#FFFFFFFF" Stroke="{x:Null}"/>
							<Path
								Margin="8,8,0,0"
								HorizontalAlignment="Left"
								VerticalAlignment="Top"
								Height="10"
								Width="8"
								Stretch="Fill"
								Opacity="1"
								Data="M 729.96875,487.53125 C729.953125,487.40625 729.9375,487.296875 729.90625,487.21875 729.875,487.140625 729.828125,487.078125 729.796875,487.046875 729.75,487.015625 729.703125,487 729.65625,487 729.65625,487 727,487 727,487 727,487 727,483.453125 727,483.453125 727,483.390625 726.984375,483.328125 726.953125,483.265625 726.921875,483.203125 726.859375,483.15625 726.78125,483.125 726.703125,483.09375 726.609375,483.0625 726.484375,483.03125 726.359375,483.015625 726.1875,483 726,483 725.8125,483 725.640625,483.015625 725.515625,483.03125 725.390625,483.0625 725.28125,483.09375 725.21875,483.125 725.140625,483.15625 725.078125,483.203125 725.046875,483.265625 725.015625,483.328125 725,483.390625 725,483.453125 725,483.453125 725,487 725,487 725,487 722.34375,487 722.34375,487 722.28125,487 722.234375,487.015625 722.203125,487.046875 722.15625,487.078125 722.125,487.140625 722.09375,487.21875 722.0625,487.296875 722.03125,487.40625 722.015625,487.53125 722,487.671875 722,487.828125 722,488 722,488.1875 722,488.359375 722.03125,488.484375 722.046875,488.609375 722.078125,488.71875 722.109375,488.796875 722.140625,488.875 722.171875,488.921875 722.21875,488.953125 722.25,488.984375 722.296875,489 722.359375,489 722.359375,489 725,489 725,489 725,489 725,492.5625 725,492.5625 725,492.625 725.015625,492.6875 725.046875,492.75 725.078125,492.8125 725.140625,492.859375 725.21875,492.890625 725.28125,492.921875 725.390625,492.953125 725.515625,492.96875 725.640625,493 725.8125,493 726,493 726.1875,493 726.359375,493 726.484375,492.96875 726.609375,492.953125 726.703125,492.921875 726.78125,492.890625 726.859375,492.859375 726.921875,492.8125 726.953125,492.75 726.984375,492.6875 727,492.625 727,492.5625 727,492.5625 727,489 727,489 727,489 729.640625,489 729.640625,489 729.6875,489 729.734375,488.984375 729.78125,488.953125 729.8125,488.921875 729.859375,488.875 729.890625,488.796875 729.921875,488.71875 729.953125,488.609375 729.96875,488.484375 729.984375,488.359375 730,488.1875 730,488 730,487.828125 729.984375,487.671875 729.96875,487.53125 729.96875,487.53125 729.96875,487.53125 729.96875,487.53125 z"
								Fill="#ffffff" />
							<Path
								Margin="7,7,0,0"
								HorizontalAlignment="Left"
								VerticalAlignment="Top"
								Height="10"
								Width="8"
								Stretch="Fill"
								Opacity="1"
								Data="M 728.96875,486.53125 C728.953125,486.40625 728.9375,486.296875 728.90625,486.21875 728.875,486.140625 728.828125,486.078125 728.796875,486.046875 728.75,486.015625 728.703125,486 728.65625,486 728.65625,486 726,486 726,486 726,486 726,482.453125 726,482.453125 726,482.390625 725.984375,482.328125 725.953125,482.265625 725.921875,482.203125 725.859375,482.15625 725.78125,482.125 725.703125,482.09375 725.609375,482.0625 725.484375,482.03125 725.359375,482.015625 725.1875,482 725,482 724.8125,482 724.640625,482.015625 724.515625,482.03125 724.390625,482.0625 724.28125,482.09375 724.21875,482.125 724.140625,482.15625 724.078125,482.203125 724.046875,482.265625 724.015625,482.328125 724,482.390625 724,482.453125 724,482.453125 724,486 724,486 724,486 721.34375,486 721.34375,486 721.28125,486 721.234375,486.015625 721.203125,486.046875 721.15625,486.078125 721.125,486.140625 721.09375,486.21875 721.0625,486.296875 721.03125,486.40625 721.015625,486.53125 721,486.671875 721,486.828125 721,487 721,487.1875 721,487.359375 721.03125,487.484375 721.046875,487.609375 721.078125,487.71875 721.109375,487.796875 721.140625,487.875 721.171875,487.921875 721.21875,487.953125 721.25,487.984375 721.296875,488 721.359375,488 721.359375,488 724,488 724,488 724,488 724,491.5625 724,491.5625 724,491.625 724.015625,491.6875 724.046875,491.75 724.078125,491.8125 724.140625,491.859375 724.21875,491.890625 724.28125,491.921875 724.390625,491.953125 724.515625,491.96875 724.640625,492 724.8125,492 725,492 725.1875,492 725.359375,492 725.484375,491.96875 725.609375,491.953125 725.703125,491.921875 725.78125,491.890625 725.859375,491.859375 725.921875,491.8125 725.953125,491.75 725.984375,491.6875 726,491.625 726,491.5625 726,491.5625 726,488 726,488 726,488 728.640625,488 728.640625,488 728.6875,488 728.734375,487.984375 728.78125,487.953125 728.8125,487.921875 728.859375,487.875 728.890625,487.796875 728.921875,487.71875 728.953125,487.609375 728.96875,487.484375 728.984375,487.359375 729,487.1875 729,487 729,486.828125 728.984375,486.671875 728.96875,486.53125 728.96875,486.53125 728.96875,486.53125 728.96875,486.53125 z"
								Fill="#666666" />
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True"/>
							<Trigger Property="IsDefaulted" Value="True"/>
							<Trigger Property="IsMouseOver" Value="True"/>
							<Trigger Property="IsPressed" Value="True"/>
							<Trigger Property="IsEnabled" Value="False"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="Background" Value="#FF000000"/>
		</Style>
		<DataTemplate x:Key="ItemTemplate">
			<StackPanel Margin="0,0,0,9" d:DataContext="{Binding}">
				<TextBlock x:Name="CustomerName" Margin="1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="150" FontSize="18" FontWeight="Bold" Text="{Binding Path=Name, Mode=Default}"/>
				<TextBlock Text="{Binding Path=Company}" Margin="1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="150"/>
				<TextBlock Text="{Binding Path=DOB}" Margin="1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="150"/>
				<TextBlock Margin="1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="150"><Run Text="(222) 555-0101"/></TextBlock>
				<TextBlock Text="{Binding Path=Worth}" Margin="1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="150"/>
			</StackPanel>
		</DataTemplate>
	<Style x:Key="PatientRecordItemStyle" TargetType="{x:Type ListBoxItem}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="Padding" Value="2,0,0,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Border x:Name="Bd" SnapsToDevicePixels="true" Padding="0,0,0,0" Background="#FFFFFFFF" BorderThickness="0,0,0,0" Width="Auto" >
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="0.505*"/>
								<RowDefinition Height="0.495*"/>
							</Grid.RowDefinitions>
							<TextBlock FontFamily="Calibri" FontSize="14" FontWeight="Bold" Foreground="#FF1FA4FC" TextWrapping="Wrap" Margin="45,10,0,0" Height="13.75" Grid.Row="0"><Run Text="11-23-09"/><LineBreak/></TextBlock>
							<TextBlock FontFamily="Calibri" FontSize="12" FontWeight="Normal" Foreground="#FF767676" TextWrapping="Wrap" Margin="45,0,41.5,10" Height="15.18" Text="Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis " Grid.Row="1"/>
							<Path Fill="#FFFFFFFF" Stretch="Fill" Stroke="#FFA1A1A1" StrokeDashArray="2" Margin="0,0,0,0" VerticalAlignment="Bottom" Width="Auto" Height="1.002" Data="M0,49.93 L1448.8341,49.93" Grid.Row="1"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="Selector.IsSelectionActive" Value="false"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="TabItemFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1" Margin="3,3,3,1" SnapsToDevicePixels="true"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type igWindows:XamTabControl}">
	<Setter Property="Template">
	<Setter.Value>
	<ControlTemplate TargetType="{x:Type igWindows:XamTabControl}">
		<Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
			<Grid.RowDefinitions>
				<RowDefinition x:Name="gridRow0" Height="Auto"/>
				<RowDefinition x:Name="gridRow1" Height="*"/>
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition x:Name="gridCol0"/>
				<ColumnDefinition x:Name="gridCol1" Width="0"/>
			</Grid.ColumnDefinitions>
			<Border x:Name="ContentPanel" Margin="0,-1,0,0" Visibility="Visible" Background="{TemplateBinding Background}" BorderBrush="{x:Null}" Grid.Row="1" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
				<Border Margin="0,1,0,0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
					<Border CornerRadius="0,0,0,0" Margin="0,4,0,0">
						<Border.Background>
							<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
								<GradientStop Color="#FFE6E6E6" Offset="0"/>
								<GradientStop Color="#FFFFFFFF" Offset="1"/>
							</LinearGradientBrush>
						</Border.Background>
						<ContentPresenter x:Name="PART_SelectedContentHost" Margin="{TemplateBinding Padding}" Height="{TemplateBinding TabItemContentHeight}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding SelectedContent}" ContentSource="SelectedContent" ContentTemplate="{TemplateBinding SelectedContentTemplate}"/>
					</Border>
				</Border>
			</Border>
			<DockPanel x:Name="PART_HeaderArea" Panel.ZIndex="1" Background="#FFEFEFEF">
				<ContentPresenter x:Name="PreTabItemContent" Content="{TemplateBinding PreTabItemContent}" ContentTemplate="{TemplateBinding PreTabItemContentTemplate}" DockPanel.Dock="Left"/>
				<Button x:Name="CloseButton" Style="{DynamicResource XamTabControl.CloseButtonStyleKey}" Visibility="Collapsed" Command="igWindows:TabControlCommands.CloseSelected" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Right"/>
				<ContentPresenter x:Name="PostTabItemContent" Content="{TemplateBinding PostTabItemContent}" ContentTemplate="{TemplateBinding PostTabItemContentTemplate}" DockPanel.Dock="Right"/>
				<igWindows:XamPager x:Name="PART_TabItemScrollViewer" Style="{DynamicResource XamTabControl.SingleRowTabItemPagerStyleKey}" CanContentScroll="True" HorizontalScrollBarVisibility="{TemplateBinding TabItemHorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding TabItemVerticalScrollBarVisibility}">
					<ItemsPresenter x:Name="PART_TabHeaderPanel" Margin="0,0,1,0" KeyboardNavigation.TabIndex="1"/>
				</igWindows:XamPager>
			</DockPanel>
			<Popup x:Name="PART_Popup" Width="{TemplateBinding PreferredDropDownExtent}" AllowsTransparency="True" CustomPopupPlacementCallback="{TemplateBinding PreferredDropDownPlacementCallback}" IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Custom" PopupAnimation="{Binding Path=DropDownAnimation, RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="False">
				<Border BorderBrush="#FFD0CEBF" BorderThickness="0,0,1,1" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
						<Border Background="{TemplateBinding Background}">
							<ContentPresenter x:Name="PART_SelectedContentHostMinimized" HorizontalAlignment="{Binding Path=HorizontalAlignment, ElementName=PART_SelectedContentHost}" Margin="{TemplateBinding Padding}" VerticalAlignment="{Binding Path=VerticalAlignment, ElementName=PART_SelectedContentHost}" Height="{TemplateBinding TabItemContentHeight}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{x:Null}" ContentSource="SelectedContent" ContentTemplate="{TemplateBinding SelectedContentTemplate}"/>
						</Border>
					</Border>
				</Border>
			</Popup>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="ShowTabHeaderCloseButton" Value="True">
				<Setter Property="Visibility" TargetName="CloseButton" Value="Visible"/>
			</Trigger>
			<Trigger Property="DropDownAnimation" Value="None"/>
			<Trigger Property="TabStripPlacement" Value="Top">
				<Setter Property="Width" TargetName="PART_Popup" Value="{Binding Path=PreferredDropDownExtent, RelativeSource={RelativeSource TemplatedParent}}"/>
				<Setter Property="Margin" TargetName="CloseButton" Value="3,1,3,0"/>
				<Setter Property="VerticalAlignment" TargetName="PreTabItemContent" Value="Bottom"/>
				<Setter Property="VerticalAlignment" TargetName="PostTabItemContent" Value="Bottom"/>
				<Setter Property="Margin" TargetName="PostTabItemContent" Value="3,0,3,2"/>
			</Trigger>
			<Trigger Property="TabStripPlacement" Value="Bottom">
				<Setter Property="Margin" TargetName="CloseButton" Value="3,0,3,1"/>
				<Setter Property="Margin" TargetName="PostTabItemContent" Value="3,2,3,0"/>
				<Setter Property="Margin" TargetName="PreTabItemContent" Value="3,2,3,0"/>
				<Setter Property="Grid.Row" TargetName="PART_HeaderArea" Value="1"/>
				<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
				<Setter Property="Height" TargetName="gridRow0" Value="*"/>
				<Setter Property="Height" TargetName="gridRow1" Value="Auto"/>
				<Setter Property="Width" TargetName="PART_Popup" Value="{Binding Path=PreferredDropDownExtent, RelativeSource={RelativeSource TemplatedParent}}"/>
				<Setter Property="Margin" TargetName="PART_TabHeaderPanel" Value="2,0,2,2"/>
			</Trigger>
			<Trigger Property="TabStripPlacement" Value="Left">
				<Setter Property="Margin" TargetName="CloseButton" Value="0,0,4,3"/>
				<Setter Property="Margin" TargetName="PostTabItemContent" Value="5,3,4,3"/>
				<Setter Property="Margin" TargetName="PreTabItemContent" Value="5,3,4,3"/>
				<Setter Property="DockPanel.Dock" TargetName="CloseButton" Value="Bottom"/>
				<Setter Property="HorizontalAlignment" TargetName="CloseButton" Value="Right"/>
				<Setter Property="Grid.Row" TargetName="PART_HeaderArea" Value="1"/>
				<Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
				<Setter Property="Height" TargetName="gridRow0" Value="0"/>
				<Setter Property="Width" TargetName="gridCol0" Value="Auto"/>
				<Setter Property="Width" TargetName="gridCol1" Value="*"/>
				<Setter Property="DockPanel.Dock" TargetName="PreTabItemContent" Value="Top"/>
				<Setter Property="DockPanel.Dock" TargetName="PostTabItemContent" Value="Bottom"/>
				<Setter Property="Height" TargetName="PART_Popup" Value="{Binding Path=PreferredDropDownExtent, RelativeSource={RelativeSource TemplatedParent}}"/>
				<Setter Property="Margin" TargetName="PART_TabHeaderPanel" Value="2,2,0,2"/>
			</Trigger>
			<Trigger Property="TabStripPlacement" Value="Right">
				<Setter Property="Margin" TargetName="PostTabItemContent" Value="5,3,4,3"/>
				<Setter Property="Margin" TargetName="PreTabItemContent" Value="5,3,4,3"/>
				<Setter Property="Margin" TargetName="CloseButton" Value="4,0,0,3"/>
				<Setter Property="DockPanel.Dock" TargetName="CloseButton" Value="Bottom"/>
				<Setter Property="HorizontalAlignment" TargetName="CloseButton" Value="Left"/>
				<Setter Property="Grid.Row" TargetName="PART_HeaderArea" Value="1"/>
				<Setter Property="Grid.Column" TargetName="PART_HeaderArea" Value="1"/>
				<Setter Property="Height" TargetName="gridRow0" Value="0"/>
				<Setter Property="Width" TargetName="gridCol0" Value="*"/>
				<Setter Property="Width" TargetName="gridCol1" Value="Auto"/>
				<Setter Property="DockPanel.Dock" TargetName="PreTabItemContent" Value="Top"/>
				<Setter Property="DockPanel.Dock" TargetName="PostTabItemContent" Value="Bottom"/>
				<Setter Property="Height" TargetName="PART_Popup" Value="{Binding Path=PreferredDropDownExtent, RelativeSource={RelativeSource TemplatedParent}}"/>
				<Setter Property="Margin" TargetName="PART_TabHeaderPanel" Value="0,2,2,2"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False"/>
			<Trigger Property="IsMinimized" Value="True">
				<Setter Property="Visibility" TargetName="ContentPanel" Value="Collapsed"/>
			</Trigger>
			<Trigger Property="IsMultiRow" Value="True">
				<Setter Property="Style" TargetName="PART_TabItemScrollViewer" Value="{DynamicResource XamTabControl.MultiRowTabItemPagerStyleKey}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	</Setter.Value>
	</Setter>
	<Setter Property="BorderBrush" Value="{DynamicResource TabControlNormalBorderBrush}"/>
	<Setter Property="BorderThickness" Value="0,1,0,0"/>
	<Setter Property="Background">
		<Setter.Value>
			<SolidColorBrush Color="#FF666666" igThemes:ResourceWasher.WashGroup="Selected"/>
		</Setter.Value>
	</Setter>
	</Style>
	<Style TargetType="{x:Type igWindows:TabItemEx}">
	<Setter Property="Template">
	<Setter.Value>
	<ControlTemplate TargetType="{x:Type igWindows:TabItemEx}">
		<Grid SnapsToDevicePixels="True">
			<Border x:Name="Bd" Background="{TemplateBinding BorderBrush}" BorderBrush="{TemplateBinding Background}" BorderThickness="1,1,1,0" Padding="{TemplateBinding Padding}" CornerRadius="0">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition/>
						<ColumnDefinition Width="Auto"/>
					</Grid.ColumnDefinitions>
					<Border x:Name="InnerBg" Margin="0,1,1,0" Background="#FF666666" CornerRadius="0" Visibility="Collapsed"/>
					<ContentPresenter x:Name="Content" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Header}" ContentSource="Header" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" RecognizesAccessKey="True" Margin="6,0,6,0" VerticalAlignment="Center" HorizontalAlignment="Center"/>
					<Button x:Name="CloseButton" Margin="10,0,0,0"  Visibility="{TemplateBinding ComputedCloseButtonVisibility}" Command="igWindows:TabItemExCommands.Close" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="1"/>
				</Grid>
			</Border>
			<Rectangle x:Name="rectangle" Fill="{TemplateBinding BorderBrush}" Stroke="{x:Null}" HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="1" Height="1" Visibility="Collapsed"/>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True"/>
			<Trigger Property="IsSelected" Value="True">
				<Setter Property="Panel.ZIndex" Value="1"/>
				<Setter Property="Visibility" TargetName="InnerBg" Value="Visible"/>
				<Setter Property="Background" Value="{DynamicResource TabItemSelectedBackground}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource TabItemSelectedBorder}"/>
				<Setter Property="Foreground" Value="#FFFFFFFF"/>
				<Setter Property="Visibility" TargetName="rectangle" Value="Visible"/>
				<Setter Property="Margin" TargetName="Content" Value="6,-1,6,0"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="False"/>
					<Condition Property="IsMouseOver" Value="True"/>
				</MultiTrigger.Conditions>
			</MultiTrigger>
			<Trigger Property="TabStripPlacement" Value="Top">
				<Setter Property="Margin" Value="0,0,6,0"/>
			</Trigger>
			<Trigger Property="TabStripPlacement" Value="Bottom"/>
			<Trigger Property="TabStripPlacement" Value="Left">
				<Setter Property="Padding" Value="4,2,4,2"/>
				<Setter Property="Margin" Value="0,0,0,1"/>
				<Setter Property="BorderThickness" TargetName="Bd" Value="1,1,0,1"/>
				<Setter Property="BorderThickness" TargetName="InnerBg" Value="1,1,0,1"/>
				<Setter Property="Margin" TargetName="InnerBg" Value="1,1,0,1"/>
			</Trigger>
			<Trigger Property="TabStripPlacement" Value="Right">
				<Setter Property="Padding" Value="4,2,4,2"/>
				<Setter Property="Margin" Value="0,0,0,1"/>
				<Setter Property="BorderThickness" TargetName="Bd" Value="0,1,1,1"/>
				<Setter Property="BorderThickness" TargetName="InnerBg" Value="0,1,1,1"/>
				<Setter Property="Margin" TargetName="InnerBg" Value="0,1,1,1"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="True"/>
					<Condition Property="TabStripPlacement" Value="Top"/>
				</MultiTrigger.Conditions>
				<Setter Property="Margin" Value="0,0,6,-1"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="True"/>
					<Condition Property="TabStripPlacement" Value="Bottom"/>
				</MultiTrigger.Conditions>
				<Setter Property="Margin" Value="-2,-1,-3,-2"/>
				<Setter Property="Margin" TargetName="Content" Value="0,1,0,0"/>
				<Setter Property="Padding" Value="7,3,8,1"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="True"/>
					<Condition Property="TabStripPlacement" Value="Left"/>
				</MultiTrigger.Conditions>
				<Setter Property="Margin" Value="-2,-2,-1,-3"/>
				<Setter Property="Margin" TargetName="Content" Value="0,0,1,0"/>
				<Setter Property="Padding" Value="4,4,4,6"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="True"/>
					<Condition Property="TabStripPlacement" Value="Right"/>
				</MultiTrigger.Conditions>
				<Setter Property="Margin" Value="-1,-2,-2,-3"/>
				<Setter Property="Margin" TargetName="Content" Value="1,0,0,0"/>
				<Setter Property="Padding" Value="4,4,4,6"/>
			</MultiTrigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background" TargetName="Bd" Value="#FFFFC0CB"/>
				<Setter Property="BorderBrush" TargetName="Bd" Value="#FF00FFFF"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="False"/>
					<Condition Property="IsMouseOver" Value="True"/>
					<Condition Property="TabStripPlacement" Value="Bottom"/>
				</MultiTrigger.Conditions>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="False"/>
					<Condition Property="IsMouseOver" Value="True"/>
					<Condition Property="TabStripPlacement" Value="Left"/>
				</MultiTrigger.Conditions>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="False"/>
					<Condition Property="IsMouseOver" Value="True"/>
					<Condition Property="TabStripPlacement" Value="Right"/>
				</MultiTrigger.Conditions>
			</MultiTrigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Visibility" TargetName="InnerBg" Value="Collapsed"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	</Setter.Value>
	</Setter>
		<Setter Property="Background" Value="{x:Null}"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="Margin" Value="0,0,6,-1"/>
		<Setter Property="MinHeight" Value="25"/>
		<Setter Property="Foreground" Value="#FF666666"/>
		<Setter Property="Height" Value="25"/>
	</Style>
	
	
	<!-- DataGridStyle -->
	<!-- _________________________ LabelContent Style______________________________________ -->
	<Style x:Key="LabelContentStyle" TargetType="{x:Type ContentControl}">
		<Setter Property="Padding" Value="10,3,10,3"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContentControl}">
					<ContentPresenter
						Margin="{TemplateBinding Padding}"
						Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
						ContentTemplate="{TemplateBinding ContentTemplate}"
						ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
	<Style x:Key="SimpleComboBox" TargetType="{x:Type ComboBox}">
	<Setter Property="FontSize" Value="28"/>
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid>
						<!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
						<ToggleButton Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
						<ContentPresenter HorizontalAlignment="Stretch" Margin="6,3,40,3" x:Name="ContentSite" VerticalAlignment="Stretch" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>
						
						<!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
						<TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Stretch" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Stretch" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>
						
						<!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton -->
						<Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
							<Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
								<Border x:Name="DropDownBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
								<ScrollViewer Margin="4,6,4,6" Style="{DynamicResource SimpleScrollViewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
							
									<!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
									<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
								
								</ScrollViewer>
							</Grid>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>						
						<!-- This forces the DropDown to have a minimum size if it is empty -->
						<Trigger Property="HasItems" Value="false">
							<Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
						<Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
							<Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
							<Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
						</Trigger>
						<Trigger Property="IsEditable" Value="true">
							<Setter Property="IsTabStop" Value="false"/>
							<Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
							<Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemContainerStyle" Value="{DynamicResource ComboBoxItemStyle}"/>
	</Style>
		
		
	<!-- LabelPresenter Style -->
	<Style TargetType="{x:Type igDP:LabelPresenter}">
		<Setter Property="Padding" Value="0,0,0,0"/>
		<Setter Property="Panel.ZIndex" Value="100"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:LabelPresenter}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="sbHighlightOn"/>
						<Storyboard x:Key="sbHighlightOff"/>
						<Storyboard x:Key="SigmaFadeIn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SigmaFadeOut">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SigmaFadeInFilterButton">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SigmaFadeOutFilterButton">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<igWindows:CardPanel Margin="{TemplateBinding Padding}" Background="#00000000">
						<!-- End Background Bar -->
						<Grid
							RenderTransformOrigin="0.5,0.5"
							SnapsToDevicePixels="True"
							HorizontalAlignment="Stretch"
							x:Name="background"
							VerticalAlignment="Stretch"
							Width="Auto"
							Height="Auto"
							Margin="0,0,0,0">
							<Border
								Margin="0,0,0,0"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								x:Name="Labelbase"/>
							<Rectangle Fill="#FFFFFFFF" Stroke="{x:Null}" VerticalAlignment="Bottom" Height="1" Margin="0,0,0,1"/>
						</Grid>
						<Grid
							x:Name="sortIndicatorAndLabel"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Margin="0,1,4,1"
							MinHeight="20">
							<!-- HorizontalAlignment="{Binding Path=Field.LabelTextAlignmentResolved, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource textAlignmentToHorizontalAlignmentConverter}}"  -->
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<!-- Label Text -->
							<ContentControl
								x:Name="LabelContent"
								Style="{StaticResource LabelContentStyle}"
								Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
								Height="Auto"
								
								Grid.ColumnSpan="1"/>
							<!-- End Label Text -->
							<igWindows:SortIndicator
								x:Name="SortIndicator"
								SortStatus="{TemplateBinding SortStatus}"
								Visibility="Collapsed"
								Width="10"
								Height="Auto"
								Grid.Column="1"
								HorizontalAlignment="Right"
								VerticalAlignment="Center"
								Margin="5,0,0,0" Background="#FFC4C4C4" Style="{DynamicResource SortIndicatorStyle}"/>
							<!-- SSP 3/31/08 - Summaries Functionality -->
							<igDP:SummaryButton
								x:Name="SummaryButton"
								Field="{TemplateBinding Field}"
								Visibility="{Binding Path=Field.AllowSummariesResolved, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}"
								HorizontalAlignment="Right"
								VerticalAlignment="Stretch"
								Width="Auto"
								Grid.Column="2"
								Margin="5,0,0,0"
								Grid.Row="0"
								Opacity="0.4"/>
							<!-- JJD 1/06/09 - Filtering Functionality -->
							<igDP:FilterButton
								x:Name="FilterButton"
								Field="{TemplateBinding Field}"
								Visibility="{TemplateBinding FilterButtonVisibility}"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Width="Auto"
								Grid.Column="3"
                                Opacity="0.4"
								Margin="5,0,0,0"/>
							<!-- JM 1/14/09 - Fixed Fields Functionality -->
							<igDP:FixedFieldButton
								x:Name="FixedButton"
								Field="{TemplateBinding Field}"
								Visibility="{TemplateBinding FixedButtonVisibility}"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Width="Auto"
								Grid.Column="4"
								Margin="2,0,2,0"
								Opacity="0.4"/>
						</Grid>
						<!-- End Highlight -->
					</igWindows:CardPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="HorizontalAlignment" Value="Right" SourceName="sortIndicatorAndLabel">
							<Setter Property="Margin" TargetName="sortIndicatorAndLabel" Value="4,0,6,0"/>
						</Trigger>
						<Trigger Property="IsDragSource" Value="True">
							<Setter Property="Margin" Value="1,0,0,0"/>
							<Setter Property="BorderBrush" Value="#FFFFFFFF"/>
							<Setter Property="Margin" TargetName="LabelContent" Value="-1,0,0,0"/>
							<Setter Property="Margin" TargetName="SortIndicator" Value="5,0,-1,0"/>
							<Setter Property="Margin" TargetName="SummaryButton" Value="5,0,-1,-1"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource SigmaFadeOut}" x:Name="SigmaFadeOut"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource SigmaFadeIn}" x:Name="SigmaFadeIn"/>
							</Trigger.EnterActions>
							<Setter Property="Panel.ZIndex" Value="200"/>
							
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition SourceName="FilterButton" Property="HasActiveFilters" Value="False"/>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
							<!-- JM 04-09-09 Comment these animations out for now to address TFS 16564.  This bug was discovered as we were getting ready to release
											 the April 2009 9.1 Hotfix and is caused by a bug in the WPF framework that we will need to work around by
											 replacing this MultiTrigger with a MultiDataTrigger. -->
							<!--<MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="SigmaFadeIn_FB_BeginStoryboard" Storyboard="{StaticResource SigmaFadeInFilterButton}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeOutFilterButton}" x:Name="SigmaFadeOut_FB_BeginStoryboard"/>
                                <RemoveStoryboard BeginStoryboardName="SigmaFadeIn_FB_BeginStoryboard"/>
                            </MultiTrigger.ExitActions>-->
							<Setter TargetName="FilterButton" Property="Opacity" Value="1"/>
						</MultiTrigger>
						<Trigger SourceName="FilterButton" Property="HasActiveFilters" Value="True">
							<Setter TargetName="FilterButton" Property="Opacity" Value="1"/>
						</Trigger>
						<!-- HighlightPrimary -->
						<Trigger Property="HighlightAsPrimary" Value="true">
							<Setter Property="Background" Value="#FF9DC1E4"/>
							<Setter Property="BorderBrush" Value="#FFFFFFFF"/>
						</Trigger>
						<Trigger Property="SortStatus" Value="Ascending">
							<Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="SortStatus" Value="Descending">
							<Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Background" Value="{DynamicResource HeaderBg}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource LabelBottomBorderBrush}"/>
		<Setter Property="BorderThickness" Value="0,1"/>
		<Setter Property="LabelHighlight" Value="{x:Null}"/>
		<Setter Property="Margin" Value="0,1,0,0"/>
		<Setter Property="Foreground" Value="Black"/>
	</Style>
	
	<Style TargetType="{x:Type igDP:DataRecordPresenter}">
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="HeaderAreaBackground" Value="{DynamicResource HeaderBg}"/>
		<Setter Property="NestedContentBackground" Value="Transparent"/>
		<Setter Property="Background" Value="#00FFFFFF"/>
		<Setter Property="Margin" Value="0,0,0,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
					<igWindows:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
						<Border
							Visibility="Collapsed"
							
							BorderBrush="#FFD0D7E5"
							HorizontalAlignment="Stretch"
							x:Name="addRowFooter"
							VerticalAlignment="Stretch"
							Width="Auto"
							Height="Auto"
							BorderThickness="0,0,0,1"/>
						<Grid Margin="0">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
								<!-- SSP 5/6/08 - Record Separators - Added two col defs-->
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
								<!-- SSP 5/6/08 - Record Separators - Added two row defs-->
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
							</Grid.RowDefinitions>
							<!-- Expansion Checkbox -->
							<!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1-->
                            <!-- AS 1/27/09 NA 2009 Vol 1 - Set ZIndex and RenderTransform for fixed fields -->
							<igWindows:ExpansionIndicator
								x:Name="ExpansionIndicator"
                                Panel.ZIndex="1"
                                RenderTransform="{TemplateBinding FixedNearElementTransform}"
								Grid.Row="2"
								Grid.Column="0"
								Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
								IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
							<!-- Header Background -->
							<!-- Added 8/2/2006 GH -->
							<!-- SSP 5/6/08 - Record Separators - changed grid.colspan to 5 from 3-->
                            <!-- AS 2/10/09 TFS13798 - Set RenderTransform for fixed fields -->
							<igWindows:CardPanel
								x:Name="SpacerFill"
                                RenderTransform="{TemplateBinding FixedNearElementTransform}"
								Grid.Row="0"
								Grid.Column="0"
								Grid.ColumnSpan="5"
								Visibility="Visible">
								<Border
									x:Name="fill"
									Margin="0,1,0,0"
									Background="{TemplateBinding HeaderAreaBackground}"
									BorderThickness="0,1"
									BorderBrush="{DynamicResource LabelBottomBorderBrush}"/>
								<Rectangle Stroke="{x:Null}" VerticalAlignment="Bottom" Height="1" Fill="White" Margin="0,0,0,1"/>
							</igWindows:CardPanel>
							<!-- End Added 8/2/2006 GH -->
							<!-- Header Content -->
							<!-- SSP 5/6/08 - Record Separators - changed grid.col to 2 from 1-->
							<ContentPresenter
								x:Name="PART_HeaderContentSite"
								Grid.Row="0"
								Grid.Column="2"
								Content="{TemplateBinding HeaderContent}"
								Visibility="Visible"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,0,0,0"
								/>
							<!-- SSP 5/6/08 - Record Separators - Added separator rectangle -->
							<Border
								x:Name="RecordSeparator"
								Grid.Row="1"
								Grid.Column="0"
								Grid.ColumnSpan="5"
								Visibility="Collapsed"
								Style="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, RecordSeparatorStyle}}"/>
							
							<ContentPresenter
								x:Name="PART_RecordContentSite"
								Grid.Row="2"
								Grid.Column="2"
								Content="{TemplateBinding DataContext}"
								ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							<!-- Nested Content -->
							<!-- SSP 5/6/08 - Record Separators - changed grid.row to 4 from 2 and grid.col to 2 from 1-->
                            <!-- AS 3/25/09 TFS15801 - Set RenderTransform for fixed fields -->
							<Border
								x:Name="PART_NestedContentSite"
								Grid.Row="4"
								Grid.Column="2"
								Visibility="Visible"
								HorizontalAlignment="Left"
								VerticalAlignment="Top"
                                RenderTransform="{TemplateBinding FixedNearElementTransform}"
								Background="{TemplateBinding NestedContentBackground}">
								<!-- AS 11/14/07 BR26035 
								The namescope was broken because the recordlistcontrol was not in the logical tree. We 
								need to use a ContentControl instead so the content	is made a logical child. -->
								<ContentControl 
                                    RenderTransform="{TemplateBinding ScrollableElementTransform}"
                                    Content="{TemplateBinding NestedContent}" 
                                    Margin="2,2,0,0"/>
								<!--Margin="10,10,0,0" />-->
							</Border>
						</Grid>
					</igWindows:CardPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="Orientation" Value="Horizontal">
							<!-- START SSP 5/6/08 - Record Separators
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="0" />
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="2" />
                            <Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="3" />
														-->
							<Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="2"/>
							<Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="0"/>
							<Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="2"/>
							<Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="4"/>
							<Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top"/>
							<Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0"/>
							<Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="2"/>
							<Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1"/>
							<Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="5"/>
							<Setter TargetName="RecordSeparator" Property="Grid.Row" Value="2"/>
							<Setter TargetName="RecordSeparator" Property="Grid.Column" Value="1"/>
							<Setter TargetName="RecordSeparator" Property="Width" Value="10"/>
							<Setter TargetName="RecordSeparator" Property="Height" Value="Auto"/>
							<!-- END SSP 5/6/08 - Record Separators -->
						</Trigger>
						<Trigger Property="ShouldDisplayRecordContent" Value="False">
							<Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Collapsed"/>
							<!--JJD 9/4/07 - BR26153 -->
							<!--Only set ExpansionIndicator Visibility to Hidden if is was Visible (see new MultiTrigger below) -->
							<!--<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />-->
						</Trigger>
						<!--JJD 9/4/07 - BR26153 -->
						<!--Only set ExpansionIndicator Visibility to Hidden if is was Visible -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ShouldDisplayRecordContent" Value="False"/>
								<Condition Property="IsHeaderRecord" Value="False"/>
								<Condition Property="ExpansionIndicatorVisibility" Value="Visible"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Orientation" Value="Horizontal"/>
								<Condition Property="ShouldDisplayRecordContent" Value="False"/>
							</MultiTrigger.Conditions>
							<!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
							<Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="3"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Orientation" Value="Vertical"/>
								<Condition Property="ShouldDisplayRecordContent" Value="False"/>
							</MultiTrigger.Conditions>
							<!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
							<Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="3"/>
						</MultiTrigger>
						<Trigger Property="IsHeaderRecord" Value="True">
							<!--JJD 9/4/07 - BR26153 -->
							<!--Only set ExpansionIndicator Visibility to Hidden if is was Visible (see new MultiTrigger below) -->
							<!--<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />-->
							<Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0"/>
							<Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="0"/>
						</Trigger>
						<!--JJD 9/4/07 - BR26153 -->
						<!--Only set ExpansionIndicator Visibility to Hidden if is was Visible -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsHeaderRecord" Value="True"/>
								<Condition Property="ExpansionIndicatorVisibility" Value="Visible"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
						</MultiTrigger>
						<Trigger Property="HasHeaderContent" Value="False">
							<Setter Property="Visibility" TargetName="SpacerFill" Value="Collapsed"/>
							<Setter Property="Visibility" TargetName="PART_HeaderContentSite" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="HasNestedContent" Value="true">
							<Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
							<Setter TargetName="baseGrid" Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}"/>
						</Trigger>
						<Trigger Property="HasNestedContent" Value="False">
							<Setter Property="Visibility" TargetName="PART_NestedContentSite" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="IsFixedOnTop" Value="true">
							<Setter Property="Visibility" TargetName="addRowFooter" Value="Visible"/>
						</Trigger>
						<Trigger Property="IsFixedOnBottom" Value="true">
							<Setter Property="Margin" Value="0,2,0,0"/>
							<Setter Property="Visibility" TargetName="addRowFooter" Value="Visible"/>
						</Trigger>
						<!-- START SSP 5/6/08 - Record Separators -->
						<!-- For HasSeparatorBefore, default grid.row and grid.column settings are fine as setup 
							when declaring the record separator (and for horizontal orientation as setup in the
							orientation=horizontal trigger above).
						-->
						<Trigger Property="HasSeparatorBefore" Value="true">
							<Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
						</Trigger>
						<!-- For HasSeparatorAfter, we have to set grid.row and grid.col based on the orientation-->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasSeparatorAfter" Value="true"/>
								<Condition Property="Orientation" Value="Vertical"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
							<Setter TargetName="RecordSeparator" Property="Grid.Row" Value="3"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasSeparatorAfter" Value="true"/>
								<Condition Property="Orientation" Value="Horizontal"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
							<Setter TargetName="RecordSeparator" Property="Grid.Column" Value="3"/>
						</MultiTrigger>
						<!-- END SSP 5/6/08 - Record Separators -->
						<!-- Changing opacity of Content to differentiate between filtered records with IsFilteredOut trigger property -->
						<Trigger Property="IsFilteredOut" Value="True">
							<Setter TargetName="PART_RecordContentSite" Property="Opacity" Value="0.35"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="TemplateCardView">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
					<igWindows:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
						<!-- Record Content -->
						<Rectangle />
						<ContentPresenter
							x:Name="PART_RecordContentSite"
							Content="{TemplateBinding DataContext}"
							ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</igWindows:CardPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type igDP:DataRecordCellArea}" >
		<Setter Property="BackgroundHover" Value="#FFEBEBEB"/>
		<Setter Property="BorderHoverBrush" Value="{x:Null}"/>
		<Setter Property="BackgroundActive" Value="#FFFF9900"/>
		<Setter Property="BorderActiveBrush" Value="{x:Null}"/>
		<Setter Property="BackgroundAlternate" Value="#FFF5F5F5"/>
		<Setter Property="BackgroundSelected" Value="#FFFF9900"/>
		<Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}" />
		<Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}" />
		<Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, BlackForegroundStyle}}" />
		<Setter Property="BorderThickness" Value="0,0,0,0"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="CornerRadius" Value="0,0,0,0"/>
		<Setter Property="Foreground" Value="#FF333333"/>
		<Setter Property="BorderSelectedBrush" Value="{x:Null}"/>
		<Setter Property="BorderAlternateBrush" Value="{x:Null}"/>
		<Setter Property="Background" Value="{x:Null}"/>
		<Setter Property="Template" Value="{DynamicResource DataRecordCellAreaControlTemplate}"/>
	</Style>
	<ControlTemplate x:Key="DataRecordCellAreaControlTemplate" TargetType="{x:Type igDP:DataRecordCellArea}">
		<ControlTemplate.Resources>
			<Storyboard x:Key="timelineIsSelected_off">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected" Storyboard.TargetProperty="(UIElement.Opacity)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="timelineHover_off">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="timelineIsActive_off">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Active" Storyboard.TargetProperty="(UIElement.Opacity)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="timelineIsActive">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Active" Storyboard.TargetProperty="(UIElement.Opacity)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="timelineIsSelected">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected" Storyboard.TargetProperty="(UIElement.Opacity)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="timelineHover">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
		</ControlTemplate.Resources>
		<igWindows:CardPanel>
			<Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
			<Border x:Name="Alternate" Opacity="1" Visibility="Collapsed" Background="{TemplateBinding BackgroundAlternate}" BorderBrush="{TemplateBinding BorderAlternateBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}"/>
			<Border x:Name="Selected" Opacity="0" Visibility="Visible" Background="{TemplateBinding BackgroundSelected}" BorderBrush="{TemplateBinding BorderSelectedBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}"/>
			<Border x:Name="Hover" Opacity="0" Visibility="Visible" Background="{TemplateBinding BackgroundHover}" BorderBrush="{TemplateBinding BorderHoverBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}"/>
			<Border x:Name="Active" Visibility="Collapsed" Background="{TemplateBinding BackgroundActive}" BorderBrush="{TemplateBinding BorderActiveBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}"/>
			<ContentPresenter x:Name="CellContent" Style="{TemplateBinding ForegroundStyle}" Content="{TemplateBinding Content}"/>
			<Rectangle x:Name="rectangle" Fill="#FFFFD18D" Stroke="{x:Null}" Height="1" VerticalAlignment="Top" Margin="1,1,1,0" Visibility="Collapsed"/>
		</igWindows:CardPanel>
		<ControlTemplate.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsAlternate" Value="True"/>
					<Condition Property="IsFilterRecord" Value="False"/>
					<Condition Property="IsAddRecord" Value="False"/>
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" TargetName="Alternate" Value="Visible"/>
				<Setter Property="Style" TargetName="CellContent" Value="{Binding ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsActive" Value="True"/>
					<Condition Property="IsFilterRecord" Value="False"/>
				</MultiTrigger.Conditions>
				<Setter Property="Style" TargetName="CellContent" Value="{Binding ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
				<Setter Property="Visibility" TargetName="Active" Value="Visible"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.EnterActions>
					<BeginStoryboard x:Name="timelineIsSelected_BeginStoryboard">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</BeginStoryboard>
				</MultiTrigger.EnterActions>
				<MultiTrigger.ExitActions>
					<BeginStoryboard x:Name="timelineIsSelected_off_BeginStoryboard">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</BeginStoryboard>
				</MultiTrigger.ExitActions>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="True"/>
					<Condition Property="IsFilterRecord" Value="False"/>
				</MultiTrigger.Conditions>
				<Setter Property="Style" TargetName="CellContent" Value="{Binding ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
				<Setter Property="Visibility" TargetName="rectangle" Value="Visible"/>
				
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.EnterActions>
					<BeginStoryboard x:Name="timelineHover_BeginStoryboard">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</BeginStoryboard>
				</MultiTrigger.EnterActions>
				<MultiTrigger.ExitActions>
					<BeginStoryboard x:Name="timelineHover_off_BeginStoryboard">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</BeginStoryboard>
				</MultiTrigger.ExitActions>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="True"/>
					<Condition Property="IsFilterRecord" Value="False"/>
					<Condition Property="IsSelected" Value="False"/>
				</MultiTrigger.Conditions>
				<Setter Property="Style" TargetName="CellContent" Value="{Binding ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	
	<Style TargetType="{x:Type igDP:CellValuePresenter}" >
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="BackgroundHover" Value="{x:Null}"/>
		<Setter Property="BorderHoverBrush" Value="{x:Null}"/>
		<Setter Property="BorderActiveBrush" Value="{x:Null}"/>
		<Setter Property="BackgroundSelected" Value="{x:Null}"/>
		<Setter Property="BorderSelectedBrush" Value="{x:Null}"/>
		<Setter Property="BorderFieldSelectedBrush" Value="{x:Null}"/>
		<Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, BlackForegroundStyle}}"/>
		<Setter Property="ForegroundPrimaryStyle">
			<Setter.Value>
				<Style>
					<Setter Property="TextBlock.Foreground" Value="#FF333333"/>
					<Setter Property="TextBlock.FontWeight" Value="Bold"/>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, BlackForegroundStyle}}"/>
		<Setter Property="BorderThickness" Value="0,0,0,0"/>
		<Setter Property="Margin" Value="0,0,0,0"/>
		<Setter Property="Padding" Value="7,0,2,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:CellValuePresenter}">
					<igWindows:CardPanel>
						<!-- [JM 06-06-07] This element is not being used so I am commenting it out.  Its Visibility property is initialized to Collapsed and the IsSelected
                               trigger below has commented out the line that sets the Visibility to Visible. Checked with Grant on this and he feels it is left over
                               from early styling efforts and can be removed. -->
						<!--<Rectangle x:Name="LeftBorder" 
							Fill="#FFBBBBBB"
							Width="1" 
							Margin="0,1,0,0" 
							HorizontalAlignment="Left" 
							VerticalAlignment="Stretch"
							Visibility="Collapsed" />-->
						<Border
							x:Name="MainBorder"
							CornerRadius="{TemplateBinding CornerRadius}"
							BorderThickness="{TemplateBinding BorderThickness}"
							BorderBrush="{TemplateBinding BorderBrush}"
							Background="{TemplateBinding Background}"/>
						<Rectangle
							x:Name="Active"
							Fill="{TemplateBinding BackgroundActive}"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							Width="Auto"
							Height="Auto"
							SnapsToDevicePixels="True"
							Opacity="1"
							Visibility="Collapsed"
							StrokeThickness="1"
							Stroke="{TemplateBinding BorderActiveBrush}"/>
						<ContentPresenter
							x:Name="PART_EditorSite"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Margin="{TemplateBinding Padding}"
							Style="{TemplateBinding ForegroundStyle}"/>
					</igWindows:CardPanel>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, {x:Type igDP:DataRecordCellArea}, 1}}" Value="True">	
						</DataTrigger>
						<DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource FindAncestor, {x:Type igDP:DataRecordCellArea}, 1}}" Value="True">			
						</DataTrigger>
						<!-- HighlightAsPrimary -->
						<Trigger Property="HighlightAsPrimary" Value="true">
							<Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}"/>
							<Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
						</Trigger>
						<!-- IsFieldSelected -->
						<Trigger Property="IsFieldSelected" Value="true">
							<Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}"/>
							<Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="CornerRadius" Value="4"/>
							<Setter Property="BorderThickness" Value="1,1,1,1"/>
						</Trigger>
						<!-- IsSelected -->
						<!--<Trigger Property="IsSelected" Value="true">
							<Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
							<Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="CornerRadius" Value="4"/>
							<Setter Property="BorderThickness" Value="1,1,1,1"/>
						</Trigger>-->
						<!-- IsActive -->
						<!--<Trigger Property="IsActive" Value="true">
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="Visibility" TargetName="Active" Value="Visible"/>
						</Trigger>-->
						<!-- IsMouseOver -->
						<!--<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsSelected" Value="False"/>
								<Condition Property="IsFieldSelected" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}"/>
							<Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
						</MultiTrigger> -->
						<!-- Field.IsFixedStateChanging    JM 01-22-09 NA 9.1 FixedFields   -->
						<DataTrigger Binding="{Binding Path=Field.IsFixedStateChanging, RelativeSource={RelativeSource Self}}" Value="True">
							<Setter Property="Background" Value="#AA8DBAEB"/>
							<Setter Property="BorderBrush" Value="#AA8DBAEB"/>
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="BackgroundActive" Value="{x:Null}"/>
		<Setter Property="BackgroundFieldSelected" Value="{x:Null}"/>
		<Setter Property="BorderPrimaryBrush" Value="{x:Null}"/>
		<Setter Property="BackgroundPrimary" Value="{x:Null}"/>
		<Setter Property="Background" Value="{x:Null}"/>

		<Style.Triggers>
			<!-- DRCA Foreground Hover Trigger-->
			<DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type igDP:DataRecordCellArea}}}" Value="True">
				<Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}" />
			</DataTrigger>
			<DataTrigger Binding="{Binding Path=IsActive, RelativeSource={RelativeSource AncestorType={x:Type igDP:DataRecordCellArea}}}" Value="True">
				<Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}" />
			</DataTrigger>
			<!-- DRCA Foreground Selected Trigger-->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type igDP:DataRecordCellArea}}}" Value="True"/>
					<Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource AncestorType={x:Type igDP:DataRecordCellArea}}}" Value="False"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, BlackForegroundStyle}}" />
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>
	<!-- XamComboEditorStyle -->
	    <Style x:Key="ComboEditor_DropDownButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                        </Grid.ColumnDefinitions>
                        <Grid x:Name="ComboEditorDropdown" HorizontalAlignment="Right" Background="Transparent"
							Grid.Column="1" Width="15">
                            <Border SnapsToDevicePixels="True" x:Name="OuterBorder_Center" BorderThickness="1,0,0,0" CornerRadius="0,3,3,0" Background="{DynamicResource DropDownBtnBg}" BorderBrush="{DynamicResource DropDownBtnBorder}"/>
                        </Grid>
                        <Grid x:Name="glyphArrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Width="9" Height="6" Margin="0,0,1,0">
                            <Path HorizontalAlignment="Stretch" RenderTransformOrigin="0,0" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" Stretch="Fill" Data="M5.5581331,0.44194174 L6,6 6,6 6,6 0.44194174,5.5580583 z" Margin="4.499,-1.876,-1.058,2.317" d:LayoutOverrides="HorizontalAlignment">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="45"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="Tag" Value="MouseOverControlTrue"/>

                        <Trigger Property="IsChecked" Value="True"/>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboEditor_TextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboEditor_EditableComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid Background="Transparent" SnapsToDevicePixels="True">
            <Grid Grid.IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                </Grid.ColumnDefinitions>
                <TextBox x:Name="PART_EditableTextBox" 
								 Grid.Column="0"
								 Margin="{TemplateBinding Padding}"
								 Padding="-1,0,0,0" 
								 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								 IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
								 Background="Transparent"
							   BorderBrush="Transparent"
								 BorderThickness="0,0,0,0"
								 Style="{StaticResource ComboEditor_TextBoxStyle}"
								 SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							 />
                <ToggleButton
							x:Name="PART_DropDownButton"
							Grid.Column="1"
							Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
							Background="{x:Null}"
							Style="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownButtonStyle, RelativeSource={RelativeSource TemplatedParent}}"
							IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							/>
            </Grid>
            <Popup x:Name="PART_Popup" 
						 AllowsTransparency="True" 
						 Placement="Bottom"
						 VerticalOffset="1"
						 HorizontalOffset="-1"
						 IsOpen="{TemplateBinding IsDropDownOpen}" 
						 Focusable="False" 
						 PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
						 MaxHeight="{TemplateBinding MaxDropDownHeight}"
					   MinWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MinDropDownWidthResolved, RelativeSource={RelativeSource TemplatedParent}}"
						 MaxWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}}"
						 >
                
                    <Border Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
					<igWindows:PopupResizerDecorator ResizeMode="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownResizeMode, RelativeSource={RelativeSource TemplatedParent}}" >
						<ScrollViewer x:Name="ScrollViewer">
							<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</ScrollViewer>
					</igWindows:PopupResizerDecorator>
				</Border>
                
            </Popup>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="PART_Popup" Property="MinHeight" Value="95" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
               <!-- <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shdw" Property="Color" Value="#71000000" />-->
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Foreground" />
                <!--<Setter Value="{DynamicResource {x:Static ControlBrush}}" Property="Background" />-->
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="SimpleThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Thumb}">
    				<Grid Margin="0,0,0,0" x:Name="Grid">
    					<Rectangle HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="2" RadiusY="2" Stroke="{DynamicResource ScrollBarThumbBorder}">
    						<Rectangle.Fill>
    							<LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
    								<GradientStop Color="#FFFFFFFF" Offset="0"/>
    								<GradientStop Color="#FFECECEC" Offset="1"/>
    							</LinearGradientBrush>
    						</Rectangle.Fill>
    						
    						
    					</Rectangle>
    					<StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Width="6">
    						<Rectangle Fill="{DynamicResource ScrollBarHandlerHandlesBg}" RadiusX="0" RadiusY="0" HorizontalAlignment="Stretch" VerticalAlignment="Center" Width="Auto" Height="1" Stroke="{DynamicResource ScrollBarThumbBorder}"/>
    						<Rectangle Fill="#FFFFFFFF" RadiusX="0" RadiusY="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="1" Margin="1,0,0,0"/>
    						<Rectangle Fill="{DynamicResource ScrollBarHandlerHandlesBg}" RadiusX="0" RadiusY="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="1" Margin="0,0,0,0" Stroke="{DynamicResource ScrollBarThumbBorder}"/>
    						<Rectangle Fill="#FFFFFFFF" RadiusX="0" RadiusY="0" Height="1" Width="Auto" Margin="1,0,0,0" HorizontalAlignment="Stretch"/>
    						<Rectangle Fill="{DynamicResource ScrollBarHandlerHandlesBg}" RadiusX="0" RadiusY="0" Height="1" Width="Auto" Margin="0,0,0,0" Stroke="{DynamicResource ScrollBarThumbBorder}" HorizontalAlignment="Stretch"/>
    						<Rectangle Fill="#FFFFFFFF" RadiusX="0" RadiusY="0" Height="1" Width="Auto" Margin="1,0,0,0" HorizontalAlignment="Stretch"/>
    					</StackPanel>
    				</Grid>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsFocused" Value="True"/>
    					<Trigger Property="IsMouseOver" Value="True"/>
    					<Trigger Property="IsEnabled" Value="False"/>
    					<Trigger Property="IsDragging" Value="True"/>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="SimpleRepeatButton" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
    	<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
    	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type RepeatButton}">
    				<Border x:Name="Border" CornerRadius="1,1,1,1" BorderBrush="{DynamicResource ScrollBarToggleBTTNStroke}" Background="{x:Null}">
    					<ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" d:IsHidden="True"/>
    				</Border>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsKeyboardFocused" Value="true"/>
    					<Trigger Property="IsMouseOver" Value="true"/>
    					<Trigger Property="IsPressed" Value="true"/>
    					<Trigger Property="IsEnabled" Value="false"/>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="SimpleScrollRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
    	<Setter Property="Background" Value="Transparent"/>
    	<Setter Property="BorderBrush" Value="Transparent"/>
    	<Setter Property="IsTabStop" Value="false"/>
    	<Setter Property="Focusable" Value="false"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type RepeatButton}">
    				<Grid>
    					<Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
    				</Grid>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>

    <ControlTemplate x:Key="ComboEditor_NonEditableComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid Background="Transparent" SnapsToDevicePixels="True">
            <Grid Grid.IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                </Grid.ColumnDefinitions>
                <Border x:Name="SelectedItemBorder" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" >
                    <ContentPresenter								
								Content="{TemplateBinding SelectionBoxItem}"
								ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
								ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
								Margin="1,0" 
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							/>
                </Border>
                <ToggleButton
							x:Name="PART_DropDownButton"
							Grid.ColumnSpan="3"
							Style="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownButtonStyle, RelativeSource={RelativeSource TemplatedParent}}"
							IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							/>
            </Grid>
            <Popup x:Name="PART_Popup" 
						 AllowsTransparency="True" 
						 Placement="Bottom" 
						 IsOpen="{TemplateBinding IsDropDownOpen}" 
						 VerticalOffset="1"
						 HorizontalOffset="-1" 
						 Focusable="False"
						 PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
					   MaxHeight="{TemplateBinding MaxDropDownHeight}"
					   MinWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MinDropDownWidthResolved, RelativeSource={RelativeSource TemplatedParent}}"
					   MaxWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}}"
						 >
               
                    <Border Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
                        <igWindows:PopupResizerDecorator ResizeMode="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownResizeMode, RelativeSource={RelativeSource TemplatedParent}}" >
						<ScrollViewer x:Name="ScrollViewer">
							<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</ScrollViewer>
					</igWindows:PopupResizerDecorator>
                    </Border>
                
            </Popup>
        </Grid>

        <ControlTemplate.Triggers>
            <!-- SSP 11/6/07 BR27195
				 There is no need to check for IsDropDownOpen as IsSelectionBoxHighlighted already takes that into account.
			-->
            <!--<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelectionBoxHighlighted" Value="True" />
					<Condition Property="IsDropDownOpen" Value="False" />
				</MultiTrigger.Conditions>
				<Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" Property="Foreground" />
			</MultiTrigger>-->
            <Trigger Property="IsSelectionBoxHighlighted" Value="True">
                <Setter TargetName="SelectedItemBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Property="Background" />
                <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" Property="Foreground" />
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="PART_Popup" Property="MinHeight" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Foreground" />
                <!--<Setter Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Property="Background" />-->
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
               <!-- <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shdw" Property="Color" Value="#71000000" />-->
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--<Style x:Key="{x:Static igEditors:XamComboEditor.ComboEditorComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{StaticResource ComboEditor_NonEditableComboBoxTemplate}" />
        
        <Setter Property="IsSynchronizedWithCurrentItem" Value="False" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
       
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Template" Value="{StaticResource ComboEditor_EditableComboBoxTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>-->

    <Style TargetType="{x:Type igEditors:XamComboEditor}">
        <Setter Property="Background" Value="{DynamicResource ComboEditorBg}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DropDownBtnBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="1,2,1,2"/>
        <!--SSP 11/2/07 Now this is being done in code. See ComboBoxStyleKey property of the XamComboEditor-->
        <!--<Setter Property="ComboBoxStyle" Value="{StaticResource ComboEditor_ComboBoxStyle}" />-->
        <Setter Property="DropDownButtonStyle" Value="{StaticResource ComboEditor_DropDownButtonStyle}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamComboEditor}">
                    <Border x:Name="MainBorder"
					    Background="{TemplateBinding Background}"
					    BorderBrush="{TemplateBinding BorderBrush}"
					    BorderThickness="{TemplateBinding BorderThickness}"
 						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" CornerRadius="3,3,3,3">
                        <!-- SSP 10/3/07 BR25672 Took the Margin="{TemplateBinding Padding}" code out of Border element above.-->
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
													<!-- SSP 3/10/09 Display Value Task
															Added DisplayValue and DisplayValueSource properties on XamComboEditor. Use DisplayValue
															instead of the DisplayText. This also means that we can't use TextBlock since DisplayValue 
															is an object type and can contain anything. Changed to use ContentPresenter instead of TextBlock.
															
															Also enclosed the ContentPresenter in a Border element because the ContentPresenter doesn't
															have Padding, which we were setting on the TextBlock previously.
															
															<TextBlock x:Name="PART_TextBlock"
																Grid.Column="0"
																Padding="{TemplateBinding Padding}"
																Margin="1,0,0,0" 
																Text="{TemplateBinding DisplayText}"
																HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
																VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
																Foreground="{TemplateBinding Foreground}"
															/>
													-->
													<Border Grid.Column="0" Margin="1,0,0,0" Padding="{TemplateBinding Padding}" >
                            <ContentPresenter x:Name="PART_Content"
																Content="{TemplateBinding DisplayValue}"
																HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
																VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
															/>
													</Border>
							<ToggleButton x:Name="PART_DropDownButton"
								Grid.Column="1"
								Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
								IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
								ClickMode="Press"
								Style="{TemplateBinding DropDownButtonStyle}"
								Visibility="{TemplateBinding DropDownButtonVisibility}"
								/>
						</Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter Property="DropDownButtonDisplayMode" Value="Always"/>
                            <Setter Property="Padding" Value="2,2,2,2" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="EditTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamComboEditor}">
                    <Border
						x:Name="MainBorder"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="3,3,3,3"
 						>
                        <!-- SSP 10/3/07 BR25672 Took the Margin="{TemplateBinding Padding}" code out of Border element above
								since the ComboBox below is already setting its Padding to that value. We don't want to
								substract the Padding twice. -->
                        <ComboBox
							x:Name="PART_FocusSite"
							Padding="{TemplateBinding Padding}"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							IsReadOnly="{TemplateBinding ReadOnly}"
							Background="Transparent"
							BorderBrush="Transparent"
							BorderThickness="0,0,0,0"
							ContextMenu="{TemplateBinding ContextMenu}"
							IsDropDownOpen="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
							Style="{TemplateBinding ComboBoxStyle}"
							IsEditable="{TemplateBinding IsEditable}"
							SelectedValuePath="{Binding Path=ItemsProvider.ValuePath, RelativeSource={RelativeSource TemplatedParent}}"
							DisplayMemberPath="{Binding Path=ItemsProvider.DisplayMemberPath, RelativeSource={RelativeSource TemplatedParent}}"
							MaxDropDownHeight="{TemplateBinding MaxDropDownHeight}"
							igEditors:XamComboEditor.ComboEditor="{Binding RelativeSource={RelativeSource TemplatedParent}}"
					  />
                    </Border>
                    <!-- 
					SSP 6/6/07 BR23366
					Added trigger that sets IsTabStop to False based on IsInEditMode setting.
					We need this in order to make the Tab and Shift+Tab navigation work properly.
					Apparently presense of nested textbox causes Shift+Tab to misbehave and cause
					the framwork to give focus to the parent ContentPresenter if the editor
					is inside a HeaderedContentControl. This is similar to what inbox ComboBox
					does.
					-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    	<Setter Property="Margin" Value="0,1,0,0"/>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True"/>
                    <Condition Property="IsInEditMode" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
            </MultiTrigger>
            <!-- SSP 1/8/08 BR29482 - Added setter for setting Foreground. 
			 We were already setting the Background explicitly above. If we don't
			 do this then the Foreground will be inherited but not the background. 
			 This causes a problem when the editor is inside an item of a ListBox 
			 and the item is selected. The item's back color turns blue and fore 
			 color turns white. However the editor inherits only the fore color
			 and causes the contents to turn white, essentially disappear since
			 the background is explicitly set to white above. Also TextBox 
			 explicitly sets both the Background and Foreground.
			-->
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="Foreground" Value="#000000" />
                <Setter Property="Padding" Value="2,2,2,2" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsEmbedded" Value="False"/>
                </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveBorderBrushKey}}"/>
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
			</Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SimpleScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
	<Setter Property="FontSize" Value="14"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ScrollViewer}">
    				<Grid Background="{TemplateBinding Background}">
    					<Grid.ColumnDefinitions>
    						<ColumnDefinition Width="*"/>
    						<ColumnDefinition Width="Auto"/>
    					</Grid.ColumnDefinitions>
    					<Grid.RowDefinitions>
    						<RowDefinition Height="*"/>
    						<RowDefinition Height="Auto"/>
    					</Grid.RowDefinitions>
    					<ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>
						
    					<!-- The visibility of the ScrollBars is controlled by the implementation fo the control -->
    					<ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar"  Orientation="Horizontal" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" AutomationProperties.AutomationId="HorizontalScrollBar"/>
    					<ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar"  Orientation="Vertical" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" AutomationProperties.AutomationId="VerticalScrollBar"/>
    				</Grid>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>

    <!--<DataTemplate DataType="{x:Type igEditors:ComboBoxDataItem}" >
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <TextBlock x:Name="TextBlock" Text="{Binding Path=DisplayText}" Grid.Column="1" Grid.Row="0" />
			<Image Height="{Binding Path=ActualHeight, ElementName=TextBlock}" Stretch="Uniform" StretchDirection="Both" Source="{Binding Path=Image}" Grid.Column="0" Grid.Row="0" />
		</Grid>
    </DataTemplate>-->

		<!--SSP 3/10/09 Display Value Task - Added a DataTemplate that will be used as ItemTemplate when DisplayValueSource is set to Value-->
		<!--<DataTemplate x:Key="{x:Static igEditors:XamComboEditor.DisplayValueTemplateKey}">
			<DataTemplate.Resources>
				<DataTemplate DataType="{x:Type igEditors:ComboBoxDataItem}" >
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition/>
						</Grid.RowDefinitions>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<ContentPresenter x:Name="ContentPresenter" Content="{Binding Path=Value}" Grid.Column="1" Grid.Row="0" />
						<Image Height="{Binding Path=ActualHeight, ElementName=ContentPresenter}" Stretch="Uniform" StretchDirection="Both" Source="{Binding Path=Image}" Grid.Column="0" Grid.Row="0" />
					</Grid>
				</DataTemplate>
			</DataTemplate.Resources>
			<ContentPresenter Content="{Binding}" />
		</DataTemplate>-->
	
	
	<Style x:Key="WorkspaceItemsControlStyle" TargetType="{x:Type IG_TilePanel:WorkspaceItemsControl}">
	<Setter Property="Padding" Value="3,3,3,3"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type IG_TilePanel:WorkspaceItemsControl}">
					<Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
						<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<ControlTemplate x:Key="XamComboEditorControlTemplate1" TargetType="{x:Type igEditors:XamComboEditor}">
		<Border x:Name="MainBorder" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="6">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>
				<Grid.RowDefinitions>
					<RowDefinition/>
				</Grid.RowDefinitions>
				<Border Margin="1,0,0,0" Grid.Column="0" Padding="{TemplateBinding Padding}">
					<ContentPresenter x:Name="PART_Content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding DisplayValue}"/>
				</Border>
				<ToggleButton x:Name="PART_DropDownButton" Style="{DynamicResource ToggleButtonStyle1}" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Visibility="{TemplateBinding DropDownButtonVisibility}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" ClickMode="Press" Grid.Column="1"/>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEmbedded" Value="False">
				<Setter Property="CornerRadius" TargetName="MainBorder" Value="2"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="ToggleButtonStyle1" TargetType="{x:Type ToggleButton}">
		<Setter Property="MinWidth" Value="0"/>
		<Setter Property="MinHeight" Value="0"/>
		<Setter Property="Width" Value="NaN"/>
		<Setter Property="Height" Value="NaN"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="ComboEditorDropdown_Checked_Fade-Out">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="OuterBorder_Center_Checked" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="InnerBorder_Chcked" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="ComboEditorDropdown_Fade-In">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="OuterBorder_Center" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="InnerBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="ComboEditorDropdown_Checked_Fade-In">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="OuterBorder_Center_Checked" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="InnerBorder_Chcked" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="ComboEditorDropdown_Fade-Out">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="OuterBorder_Center" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="InnerBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition SharedSizeGroup="ComboBoxButton" Width="Auto"/>
						</Grid.ColumnDefinitions>
						<Grid x:Name="ComboEditorDropdown" HorizontalAlignment="Right" Margin="0,-1,-1,-1" Width="15" Opacity="1" Background="Transparent" Grid.Column="1">
							<Border x:Name="OuterBorder_Center" Opacity="0" SnapsToDevicePixels="True" Background="{DynamicResource EditorsBrushKeys.DropdownBtnHottrackCenterFillKey}" BorderBrush="{DynamicResource EditorsBrushKeys.DropdownBtnHottrackOuterBorderFillKey}" BorderThickness="1" CornerRadius="0,2,2,0"/>
							<Border x:Name="InnerBorder" Margin="1" Opacity="0" SnapsToDevicePixels="True" BorderBrush="{DynamicResource EditorsBrushKeys.DropdownBtnHottrackInnerBorderFillKey}" BorderThickness="1" CornerRadius="0,1,1,0"/>
							<Border x:Name="OuterBorder_Center_Checked" Opacity="0" SnapsToDevicePixels="True" Background="{DynamicResource EditorsBrushKeys.DropdownBtnPressedCenterFillKey}" BorderBrush="{DynamicResource EditorsBrushKeys.DropdownBtnPressedOuterBorderFillKey}" BorderThickness="1" CornerRadius="0,2,2,0"/>
							<Border x:Name="InnerBorder_Chcked" Margin="1" Opacity="0" SnapsToDevicePixels="True" BorderBrush="{DynamicResource EditorsBrushKeys.DropdownBtnPressedInnerBorderFillKey}" BorderThickness="1" CornerRadius="0,1,1,0"/>
						</Grid>
						<Path x:Name="glyphArrow" Fill="{DynamicResource EditorsBrushKeys.DropdownBtnGlyphNormalForegroundFillKey}" HorizontalAlignment="Right" Margin="0,0,3,0" VerticalAlignment="Center" IsHitTestVisible="False" SnapsToDevicePixels="True" Grid.Column="1" Data="M0,0L3.5,3.5 7,0z"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" SourceName="ComboEditorDropdown" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard x:Name="ComboEditorDropdown_Fade_In_BeginStoryboard">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="OuterBorder_Center" Storyboard.TargetProperty="(UIElement.Opacity)">
											<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="InnerBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
											<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</BeginStoryboard>
								<StopStoryboard BeginStoryboardName="ComboEditorDropdown_Fade_Out_BeginStoryboard1"/>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard x:Name="ComboEditorDropdown_Fade_Out_BeginStoryboard">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="OuterBorder_Center" Storyboard.TargetProperty="(UIElement.Opacity)">
											<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="InnerBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
											<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Trigger.EnterActions>
								<StopStoryboard BeginStoryboardName="ComboEditorDropdown_Fade_Out_BeginStoryboard"/>
								<StopStoryboard BeginStoryboardName="ComboEditorDropdown_Fade_In_BeginStoryboard"/>
								<BeginStoryboard x:Name="ComboEditorDropdown_Checked_BeginStoryboard">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="OuterBorder_Center_Checked" Storyboard.TargetProperty="(UIElement.Opacity)">
											<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="InnerBorder_Chcked" Storyboard.TargetProperty="(UIElement.Opacity)">
											<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<StopStoryboard BeginStoryboardName="ComboEditorDropdown_Checked_BeginStoryboard"/>
								<BeginStoryboard x:Name="ComboEditorDropdown_Fade_Out_BeginStoryboard1">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="OuterBorder_Center_Checked" Storyboard.TargetProperty="(UIElement.Opacity)">
											<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="InnerBorder_Chcked" Storyboard.TargetProperty="(UIElement.Opacity)">
											<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
							<Setter Property="Opacity" TargetName="OuterBorder_Center_Checked" Value="1"/>
							<Setter Property="Opacity" TargetName="InnerBorder_Chcked" Value="1"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
		<!-- This must be named as PART_ContentHost -->
		<Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
	</ControlTemplate>
	
	<ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition/>
				<ColumnDefinition Width="2"/>
				<ColumnDefinition Width="36"/>
			</Grid.ColumnDefinitions>
			<Rectangle Grid.ColumnSpan="3" HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="5" RadiusY="5" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
			<Rectangle Grid.ColumnSpan="3" HorizontalAlignment="Stretch" x:Name="Rectangle_Copy" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="4" RadiusY="4" Margin="2">
				<Rectangle.Fill>
					<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
						<GradientStop Color="White" Offset="0"/>
						<GradientStop Color="#FFF0F0F0" Offset="1"/>
					</LinearGradientBrush>
				</Rectangle.Fill>
			</Rectangle>
			<Path Grid.Column="2" x:Name="Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z" Stretch="Fill" HorizontalAlignment="Center" Width="14" Height="11"/>
			<Rectangle x:Name="rectangle" Fill="#FFD4D4D4" HorizontalAlignment="Left" Margin="0,1,0,2" Width="1" Grid.Column="1"/>
			<Rectangle x:Name="rectangle1" Fill="White" HorizontalAlignment="Right" Margin="0,1,0,2" Width="1" Grid.Column="1"/>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="true"/>
			<Trigger Property="IsChecked" Value="true">
				<Setter Property="Fill" Value="{DynamicResource PressedBrush}" TargetName="Rectangle"/>
				<Setter Property="Margin" TargetName="rectangle" Value="0,2"/>
				<Setter Property="Margin" TargetName="rectangle1" Value="0,2"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Rectangle"/>
				<Setter Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle"/>
				<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
				<Setter Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" TargetName="Arrow"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="SortIndicatorStyle" TargetType="{x:Type igWindows:SortIndicator}">
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="MinHeight" Value="3.5"/>
		<Setter Property="MinWidth" Value="7"/>
		<Setter Property="Visibility" Value="Hidden"/>
		<Setter Property="Background" Value="{DynamicResource {ComponentResourceKey ResourceId=SortIndicatorBackground, TypeInTargetAssembly={x:Type igWindows:SortIndicator}}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igWindows:SortIndicator}">
					<Polygon x:Name="Arrow" Fill="{TemplateBinding Background}" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" Points="0,0 7,0 3.5,3.5"/>
					<ControlTemplate.Triggers>
						<Trigger Property="SortStatus" Value="Descending">
							<Setter Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="SortStatus" Value="Ascending">
							<Setter Property="Points" TargetName="Arrow" Value="0,3.5 7,3.5 3.5,0"/>
							<Setter Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True"/>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="Padding" Value="3,0,3,0"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border x:Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsHighlighted" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="FontSize" Value="12"/>
	</Style>
	
	
</ResourceDictionary>
